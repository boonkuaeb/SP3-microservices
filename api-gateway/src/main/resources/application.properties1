spring.application.name=api-gateway
server.port=9000
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/spring3-microservices-security-realm
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.enabled=true
springdoc.api-docs.enabled=true
springdoc.swagger-ui.urls[0].name=Product Service
springdoc.swagger-ui.urls[0].url=/aggregate/product-service/v3/api-docs
springdoc.swagger-ui.urls[1].name=Order Service
springdoc.swagger-ui.urls[1].url=/aggregate/order-service/v3/api-docs
springdoc.swagger-ui.urls[2].name=Inventory Service
springdoc.swagger-ui.urls[2].url=/aggregate/inventory-service/v3/api-docs

#Actuator Endpoints

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always


#Resilinece4j Properties
resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true

#    Criteria to enable circuit breaker
#    COUNT_BASED mean count number of request
resilience4j.circuitbreaker.configs.default.slidingWindowType=COUNT_BASED

#    Number of Request to consider to activate circuit breaker or not?
resilience4j.circuitbreaker.configs.default.slidingWindowSize=10
#    Given Each 10 requests
#    When Failure Rate >= 50 percent
#    Then Activate Circuit Breaker
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50

#    Given request is coming for 5 requested
#    When all 5 request is failure
#    Then Activate Circuit Breaker
#    Relate to slidingWindowSize, and failureRateThreshold
resilience4j.circuitbreaker.configs.default.minimum-number-of-calls=5


#    Given Circuit is Open Stage
#    When working on Open Stage for 5s
#    Then move to Half-Open Stage
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=5s

#    Given Circuit breaker is working on Half-Open Stage
#    When client still calling
#    Then allow request only 3 request
# -----
#    Given Half-Open Stage Half-Open Stage, and Request is coming for 3 request
#    When One of three requested is failure
#    Then move Circuit breaker to Open Stage
# -----
#    Given Half-Open Stage Half-Open Stage, and Request is coming for 3 request
#    When all of requested is successfully
#    Then move Circuit breaker to Close Stage
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.configs.default.automaticTransitionFromOpenToHalfOpenEnabled=true


#Resilience4J Timeout Properties
#    Given The Resilience4j detecting calling external service
#    When waiting for 3s
#    Then the Resilience4j will stop request and count the failureRateThreshold
resilience4j.timelimiter.configs.default.timeout-duration=3s

#Resilience4J Retry Properties
#    Given external service not response
#    When retry and waiting for 5s for three times not successful
#    Then trigger to timeout-duration
resilience4j.retry.configs.default.max-attempts=3
resilience4j.retry.configs.default.wait-duration=2s


